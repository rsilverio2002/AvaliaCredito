dados<-mutate_at(dados,vars(-credit.duration.months,-age,credit.amount),as.factor)%>%glimpse()
dados<-mutate_at(dados,vars(-credit.duration.months,-age,-credit.amount),as.factor)%>%glimpse()
dados<-read_csv('credit_dataset.csv')
dados<-mutate_at(dados,vars(-credit.duration.months,-age,-credit.amount),as.factor)%>%glimpse()
dados<-mutate_at(dados,vars(-credit.duration.months,-age,-credit.amount),as.factor)
genhist<-function(x){
dados%>%
ggplot()+
geom_histogram(aes(x))
}
genhist(account.balance)
genhist('account.balance')
genhist<-function(x){
dados%>%
ggplot()+
geom_histogram(aes(x),stat='count')
}
genhist('account.balance')
View(dados)
genhist<-function(x){
dados%>%
ggplot()+
geom_histogram(aes(x,credit.rating),stat='count')
}
genhist('account.balance')
genhist<-function(x){
dados%>%
ggplot()+
geom_histogram(aes(x,credit.rating))
}
genhist('account.balance')
View(dados)
genhist<-function(x){
dados%>%
ggplot()+
geom_histogram(aes(x))
}
genhist('account.balance')
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes(x),stat='count')
}
genhist('account.balance')
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes(`x`),stat='count')
}
genhist('account.balance')
dados%>%
ggplot()+
geom_bar(aes(account.balance),stat='count')
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes(account.balance),stat='count')
}
genhist(account.balance)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes(x),stat='count')
}
genhist(account.balance)
genhist(`account.balance`)
genhist(2)
genhist<-function(x){
x<-vars(x)
dados%>%
ggplot()+
geom_bar(aes(x),stat='count')
}
genhist(account.balance)
genhist<-function(x){
x<-paste('`',x,'`')
dados%>%
ggplot()+
geom_bar(aes(x),stat='count')
}
genhist(account.balance)
genhist<-function(x){
x<-paste(x)
dados%>%
ggplot()+
geom_bar(aes(x),stat='count')
}
genhist(account.balance)
View(dados)
genhist<-function(x){
dados%>%
select(x)%>%
ggplot()+
geom_bar(aes(),stat='count')
}
genhist(account.balance)
genhist<-function(x){
x<-enquo(x)
dados%>%
select(x)%>%
ggplot()+
geom_bar(aes(),stat='count')
}
genhist(account.balance)
genhist('account.balance')
genhist<-function(){
dados%>%
ggplot()+
geom_bar(aes(get(x)),stat='count')
}
genhist('account.balance')
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes(get(x)),stat='count')
}
genhist(account.balance)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes(get(x)),stat='count')
}
genhist('account.balance')
colnames(dados)
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes(get(x)),stat='count')+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x),stat='count')+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
View(dados)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x),stat='count')+
geom_bar(aes(credit.rating),position = 'dodge')+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x),stat='count')+
geom_bar(aes(credit.rating),stat='count',position = 'dodge')+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x),stat='count')+
geom_bar(aes(credit.rating),stat='count',position = 'dodge')+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
colnames(dados)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x),stat='count')+
geom_bar(aes(credit.rating),position = 'dodge')+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
dados%>%
ggplot()+
geom_bar(aes_string("age"),stat='count')+
geom_bar(aes(credit.rating),position = 'dodge')
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x),stat='count')+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string('credit.rating',x),stat='count')+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string('credit.rating',x))+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x='credit.rating',y=x))+
ggtitle(paste(x))
}
genhist('account.balance')
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_col(aes_string(x='credit.rating',y=x))+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_col(aes_string(x))+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x))+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x))+
facet_wrap(credit.rating~.)+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x),position = 'stack')+
facet_wrap(credit.rating~.)+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x),position = 'fill')+
facet_wrap(credit.rating~.)+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x))+
facet_wrap(credit.rating~.)+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
library(randomForest)
model<-randomForest(credit.rating~.,importance=TRUE)
model<-randomForest(data=dados,credit.rating~.,importance=TRUE)
model
plot(model)
varImpPlot(model)
countunique<-function(x){
dados%>%
select(get(x))%>%
unique()
}
lapply(colnames(dados),countunique)
countunique<-function(x){
dados%>%
select(vars(x))%>%
unique()
}
lapply(colnames(dados),countunique)
countunique<-function(x){
dados%>%
select(x)%>%
unique()
}
lapply(colnames(dados),countunique)
countunique<-function(x){
dados%>%
select(x)%>%
unique()%>%
nrows()
}
lapply(colnames(dados),countunique)
countunique<-function(x){
dados%>%
select(x)%>%
unique()%>%
n()
}
sapply(colnames(dados),countunique)
countunique<-function(x){
dados%>%
select(x)%>%
unique()%>%
count()
}
sapply(colnames(dados),countunique)
criabreaks<-function(x){
dados<-dados%>%
mutate(paste(x,'_bin')=cut(x,breaks = quantile(x, probs= seq(0,1,0.25))))
}
criabreaks<-function(x){
dados<-dados%>%
mutate(paste(x,'_bin')=cut(x,breaks = quantile(x, probs= seq(0,1,0.25))))
}
criabreaks<-function(x){
dados<-dados%>%
mutate(x=cut(x,breaks = quantile(x, probs= seq(0,1,0.25))))
}
criabreaks('age')
rm(criabreaks)
age_q<-quantile(dados$age,probs = seq(0, 1, 0.5))
sapply(colnames(dados),countunique)
credit.amount_q<-quantile(dados$credit.amount,probs = seq(0, 1, 0.5))
credit.duration.months_q<-quantile(dados$credit.duration.months,probs = seq(0, 1, 0.5))
dados<-dados%>%
mutate(age_q=cut(age,breaks=age_q))
View(dados)
dados<-read_csv('credit_dataset.csv')
dados<-mutate_at(dados,vars(-credit.duration.months,-age,-credit.amount),as.factor)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x))+
facet_wrap(credit.rating~.)+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
countunique<-function(x){
dados%>%
select(x)%>%
unique()%>%
count()
}
sapply(colnames(dados),countunique)
#quebra em bins das variáveis 'contínuas'
age_q<-quantile(dados$age,probs = seq(0, 1, 0.5))
credit.amount_q<-quantile(dados$credit.amount,probs = seq(0, 1, 0.5))
credit.duration.months_q<-quantile(dados$credit.duration.months,probs = seq(0, 1, 0.5))
dados<-dados%>%
mutate(age_q=cut(age,breaks=age_q))%>%
mutate(credit.amount_q=cut(credit.amount,breaks=credit.amount_q))%>%
mutate(credit.duration.months_q=cut(credit.duration.months,breaks = credit.duration.months_q))
View(dados)
model<-randomForest(data=dados,credit.rating~.,importance=TRUE)
View(dados)
model<-randomForest(data=dados,credit.rating ~ .
-age
-credit.amount
-credit.duration.months
,importance=TRUE)
is.na.data.frame(dados)
model<-randomForest(data=dados,credit.rating ~ .
-age
-credit.amount
-credit.duration.months
,importance=TRUE)
View(dados)
dados<-dados%>%
mutate(credit.amount_q=cut(credit.amount,breaks=c(-Inf,credit.amount_q,Inf))%>%
dados<-dados%>%
mutate(credit.amount_q=cut(credit.amount,breaks=c(-Inf,credit.amount_q,Inf))%>%
dados<-dados%>%
mutate(age_q=cut(age,breaks=c(-Inf,age_q,Inf)))%>%
mutate(credit.amount_q=cut(credit.amount,breaks=c(-Inf,credit.amount_q,Inf)))%>%
mutate(credit.duration.months_q=cut(credit.duration.months,breaks = c(-Inf,credit.duration.months_q,Inf)))
dados<-read_csv('credit_dataset.csv')
dados<-mutate_at(dados,vars(-credit.duration.months,-age,-credit.amount),as.factor)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x))+
facet_wrap(credit.rating~.)+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
dados<-read_csv('credit_dataset.csv')
dados<-mutate_at(dados,vars(-credit.duration.months,-age,-credit.amount),as.factor)
genhist<-function(x){
dados%>%
ggplot()+
geom_bar(aes_string(x))+
facet_wrap(credit.rating~.)+
ggtitle(paste(x))
}
lapply(colnames(dados),genhist)
countunique<-function(x){
dados%>%
select(x)%>%
unique()%>%
count()
}
sapply(colnames(dados),countunique)
#quebra em bins das variáveis 'contínuas'
age_q<-quantile(dados$age,probs = seq(0, 1, 0.5))
credit.amount_q<-quantile(dados$credit.amount,probs = seq(0, 1, 0.5))
credit.duration.months_q<-quantile(dados$credit.duration.months,probs = seq(0, 1, 0.5))
dados<-dados%>%
mutate(age_q=cut(age,breaks=c(-Inf,age_q,Inf)))%>%
mutate(credit.amount_q=cut(credit.amount,breaks=c(-Inf,credit.amount_q,Inf)))%>%
mutate(credit.duration.months_q=cut(credit.duration.months,breaks = c(-Inf,credit.duration.months_q,Inf)))
is.na.data.frame(dados)
model<-randomForest(data=dados,credit.rating ~ .
-age
-credit.amount
-credit.duration.months
,importance=TRUE)
varImpPlot(model)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(select(dados,-credit.rating), select(dados,credit.rating), sizes=c(1:8), rfeControl=control)
select(dados,-credit.rating)
select(dados,credit.rating)
results <- rfe(as.matrix(select(dados,-credit.rating)), as.matrix(select(dados,credit.rating)), sizes=c(1:8), rfeControl=control)
results <- rfe(select(dados,-credit.rating), select(dados,credit.rating), sizes=c(1:8), rfeControl=control)
results <- rfe(credit.rating ~ ., sizes=c(1:8), rfeControl=control)
results <- rfe(data=dados,credit.rating ~ ., sizes=c(1:8), rfeControl=control)
print(results)
x<-createDataPartition(dados,p=0.8)
x<-createDataPartition(dados$credit.rating,p=0.8)
x
train<-dados[x,]
x<-createDataPartition(dados$credit.rating,p=0.8,list=FALSE)
train<-dados[x,]
test<-dados[-x,]
model1<-train(train,credit.rating ~ account.balance
+ credit.duration.months
+ previous.credit.payment.status
+ credit.amount
+ savings,
method = 'naive_bayes')
model1<-train(train, credit.rating ~ account.balance
+ credit.duration.months
+ previous.credit.payment.status
+ credit.amount
+ savings,
method = 'naive_bayes')
View(train)
model1<-train(train, credit.rating ~ account.balance + credit.duration.months + previous.credit.payment.status
+ credit.amount
+ savings,
method = 'naive_bayes')
model1<-train(data=train, credit.rating ~ account.balance + credit.duration.months + previous.credit.payment.status
+ credit.amount
+ savings,
method = 'naive_bayes')
pred1<-predict(model1, data=test)
confusionMatrix(train$credit.rating,pred1)
summary(model1)
model1
plot(model1)
confusionMatrix(test$credit.rating,pred1)
confusionMatrix(test$credit.rating,pred1)
test$credit.rating
pred1<-predict(model1, data=test)
pred1
test<-dados[-x,]
pred1<-predict(model1, data=test)
pred1
model1<-train(data=train, credit.rating ~ account.balance + credit.duration.months + previous.credit.payment.status
+ credit.amount
+ savings,
method = 'naive_bayes')
pred1<-predict(model1, data=test)
pred1
model1
plot(model1)
model2<-train(data=train, credit.rating ~ account.balance + credit.duration.months + previous.credit.payment.status
+ credit.amount
+ savings,
method = 'svm')
model2<-train(data=train, credit.rating ~ account.balance + credit.duration.months + previous.credit.payment.status
+ credit.amount
+ savings,
method = 'svmLinear3')
pred2<-predict(model2, data=test)
model2
pred2
confusionMatrix(test$credit.rating,pred2)
model2<-train(credit.rating ~ account.balance + credit.duration.months + previous.credit.payment.status
+ credit.amount
+ savings,data=train,
method = 'svmLinear')
pred2<-predict(model2, data=test)
pred2
pred2<-predict(model2, data=train)
pred2
pred2<-predict(model2, data=test)
pred2
pred1<-predict(model1, newdata=test)
pred1
pred2<-predict(model2, newdata=test)
pred2
confusionMatrix(test$credit.rating,pred1)
confusionMatrix(test$credit.rating,pred2)
model3<-train(credit.rating ~ account.balance + credit.duration.months + previous.credit.payment.status
+ credit.amount
+ savings,data=train,
method = 'rf')
pred3<-predict(model3, newdata=test)
summary(model3)
model3
plot(model3)
confusionMatrix(test$credit.rating,pred3)
install.packages("ROCR")
library(ROCR)
